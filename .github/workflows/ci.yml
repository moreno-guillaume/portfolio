
# Workflow enti√®rement automatis√© avec PAT pour bypasser les protections

name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  quality:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          tools: composer


      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache/files
          key: composer-${{ hashFiles('composer.lock') }}
          restore-keys: composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --ignore-platform-reqs

      - name: Preview smart cleaning (dry-run)
        run: |
          echo "üìã Aper√ßu du nettoyage intelligent..."
          php scripts/clean-code.php --test

      - name: Run PHP CS Fixer
        run: composer cs-check

      - name: Run PHPStan
        run: composer phpstan -vvv

      - name: Run PHPUnit tests
        run: php bin/phpunit --coverage-text

  # Nettoyage automatique apr√®s merge sur main
  production-clean:
    runs-on: ubuntu-latest
    # Se d√©clenche SEULEMENT apr√®s un push sur main (post-merge)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout main branch with admin token
        uses: actions/checkout@v4
        with:
          ref: main
          # üîë Utiliser le PAT au lieu du GITHUB_TOKEN
          token: ${{ secrets.PORTFOLIO_TOKEN }}
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml

      - name: Configure Git with bot identity
        run: |
          git config --local user.email "bot@portfolio.dev"
          git config --local user.name "Portfolio Cleaner Bot"

      - name: Apply smart cleaning for production
        run: |
          echo "Nettoyage intelligent en cours sur MAIN..."
          echo "Fichiers avant nettoyage :"
          find public/js -name "*.js" -exec echo "  üìÑ {}" \;
          
          php scripts/clean-code.php --apply
          
          echo "Nettoyage termin√©"

      - name: Check cleaning results
        id: check_changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "R√âSULTATS DU NETTOYAGE :"
            echo "Fichiers modifi√©s :"
            git status --porcelain
            echo ""
            echo "Statistiques :"
            git diff --stat
            echo ""
            echo "Commentaires supprim√©s avec succ√®s !"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "Code d√©j√† propre - aucun nettoyage n√©cessaire"
          fi

      # Commit et push avec bypass des protections
      - name: Commit and push cleaned code
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          echo "Commit du code nettoy√©..."
          
          git add -A
          git commit -m "üßπ [Auto-Clean]: Suppression automatique des commentaires de debug

          R√©sum√© :
          - Commentaires TODO, DEBUG, INFO supprim√©s
          - Console.log de debug nettoy√©s  
          - Code de production optimis√©
          - Dev branch pr√©serv√©e
          
          Nettoyage automatique par GitHub Actions"
          
          echo "Push vers main (bypass protections)..."
          git push origin main
          
          echo "Code de production nettoy√© avec succ√®s !"

      # R√©sum√© final
      - name: Production deployment summary
        run: |
          echo "D√âPLOIEMENT PRODUCTION TERMIN√â"
          echo ""
          echo "Statut :"
          if [[ "${{ steps.check_changes.outputs.changes }}" == "true" ]]; then
            echo "   Code nettoy√© automatiquement"
            echo "   Commit cr√©√© sur main"
            echo "   Pr√™t pour la production"
          else
            echo "   Code d√©j√† propre"
            echo "   Aucune action requise"
          fi
          echo ""
          echo "Branches :"
          echo "   dev  ‚Üí Commentaires pr√©serv√©s pour le d√©veloppement"
          echo "   main ‚Üí Code propre pour la production"
          echo ""
          echo "Automatisation : ACTIVE "

  # Job de v√©rification des permissions (debug)
  verify-permissions:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Verify token permissions
        env:
          TOKEN: ${{ secrets.PORTFOLIO_TOKEN }}
        run: |
          echo "V√©rification des permissions du token..."
          
          if [[ -n "$TOKEN" ]]; then
            echo "Token PORTFOLIO_TOKEN d√©tect√©"
            
            # Test d'acc√®s √† l'API GitHub
            response=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}")
            
            if echo "$response" | grep -q '"permissions"'; then
              echo "Token fonctionnel - acc√®s API confirm√©"
            else
              echo "Probl√®me potentiel avec le token"
            fi
          else
            echo "Token PORTFOLIO_TOKEN manquant !"
            echo "Ajoutez-le dans Settings ‚Üí Secrets ‚Üí Actions"
          fi

