name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  quality:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          coverage: xdebug
          tools: composer

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache/files
          key: composer-${{ hashFiles('composer.lock') }}
          restore-keys: composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --ignore-platform-reqs

      - name: Preview smart cleaning
        run: |
          echo "ðŸ“‹ AperÃ§u du nettoyage intelligent..."
          php scripts/clean-code.php --test

      - name: Run PHP CS Fixer
        run: composer cs-check

      - name: Run PHPStan  
        run: composer phpstan -vvv

      - name: Run PHPUnit tests
        run: php bin/phpunit --coverage-text

      - name: Post-merge cleaning instructions
        if: github.event.pull_request.base.ref == 'main'
        run: |
          echo "ðŸš€ INSTRUCTIONS POST-MERGE :"
          echo ""
          echo "Pour nettoyer automatiquement le code aprÃ¨s le merge :"
          echo "git checkout main && git pull origin main"
          echo "php scripts/clean-code.php --apply"  
          echo "git add -A && git commit -m 'ðŸ§¹ Clean production code'"
          echo "git push origin main"
          echo ""
          echo "âœ… Ceci nettoiera main tout en gardant dev intac