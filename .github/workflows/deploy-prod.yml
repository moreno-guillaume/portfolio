name: Deploiement vers OVH

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# INFO: se déclenche automatiquement après le merge de la PR auto-clean de ci.yml
# TODO: ajouter notifications Slack en cas d'échec de déploiement

jobs:
  check-if-cleaned:
    runs-on: ubuntu-latest
    outputs:
      is-clean: ${{ steps.check.outputs.is-clean }}
    steps:
    - name: Checkout main
      uses: actions/checkout@v4
      
    - name: Verifier si le code est nettoye
      id: check
      run: |
        # INFO: vérification que le workflow ci.yml a bien nettoyé le code avant déploiement
        # DEBUG: exclusion des fichiers .github/ qui peuvent contenir des mots-clés techniques
        if grep -r "// TODO\|// DEBUG\|// INFO\|console\.log.*debug" --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=.github . >/dev/null 2>&1; then
          echo "is-clean=false" >> $GITHUB_OUTPUT
          echo "Code contient encore des commentaires de dev - deploiement skippe"
          echo "Attendre le merge de la PR auto-clean..."
          # DEBUG: afficher quels fichiers contiennent encore des commentaires
          echo "debug: fichiers avec commentaires detectes:"
          grep -r "// TODO\|// DEBUG\|// INFO" --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=.github . | head -5
        else
          echo "is-clean=true" >> $GITHUB_OUTPUT
          echo "Code est propre - deploiement autorise"
          # DEBUG: confirmation que le nettoyage s'est bien passé
          echo "debug: aucun commentaire de dev detecte, proceeding avec deploiement"
        fi

  deploy-to-ovh:
    needs: check-if-cleaned
    if: needs.check-if-cleaned.outputs.is-clean == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main branch propre
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Configuration Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Configuration PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl
        tools: composer:v2
        
    - name: Installation des dependances Composer
      run: |
        # INFO: installation en mode production sans les dépendances de dev
        composer install --no-dev --optimize-autoloader --no-scripts
        # DEBUG: afficher la liste des packages installés
        echo "debug: packages composer installes:"
        composer show --installed | head -10
      
    - name: Installation des dependances Node
      run: |
        # INFO: utilisation de npm ci pour installation reproductible
        npm ci
        # DEBUG: vérification des versions installées
        echo "debug: version npm:" && npm --version
        echo "debug: version node:" && node --version
      
    - name: Build des assets pour la production
      run: |
        # INFO: configuration du build Vite pour la production
        npm run build
        # TODO: ajouter compression des assets CSS/JS pour optimiser la taille
        # DEBUG: afficher la taille des assets générés
        echo "debug: taille des assets generes:"
        ls -la public/build/ 2>/dev/null || echo "debug: dossier build non trouve"
      
    - name: Optimisation Symfony pour la production
      run: |
        # INFO: configuration du cache Symfony pour la production
        php bin/console cache:clear --env=prod --no-debug
        php bin/console cache:warmup --env=prod --no-debug
        # DEBUG: vérification du cache généré
        echo "debug: cache Symfony genere dans:"
        ls -la var/cache/prod/ 2>/dev/null || echo "debug: cache prod non trouve"
        # FIXME: parfois le cache warmup échoue silencieusement, ajouter vérification
      env:
        APP_ENV: prod
        APP_DEBUG: false
        APP_SECRET: ${{ secrets.APP_SECRET }}
        
    - name: Generation des informations de production
      run: |
        # INFO: création d'un fichier de metadata pour tracer les déploiements
        echo "# Informations de deploiement en production" > DEPLOY_INFO.md
        echo "- Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> DEPLOY_INFO.md
        echo "- Commit: $(git rev-parse --short HEAD)" >> DEPLOY_INFO.md
        echo "- Code: Nettoye par ci.yml puis deploye" >> DEPLOY_INFO.md
        echo "- Statut: Pret pour OVH" >> DEPLOY_INFO.md
        # DEBUG: afficher le contenu du fichier généré
        echo "debug: contenu du fichier DEPLOY_INFO.md:"
        cat DEPLOY_INFO.md
        
    - name: Push vers la branche prod
      run: |
        # INFO: configuration Git pour les commits automatiques
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
        # INFO: création de la branche prod qui contiendra uniquement le code propre
        git checkout -B prod
        
        # TODO: ajouter compression des assets avant commit pour réduire la taille du repo
        git add .
        
        # INFO: message de commit standardisé pour tracer les déploiements
        COMMIT_HASH=$(git rev-parse --short main)
        git commit -m "Deploiement production depuis main nettoye ($COMMIT_HASH)
        
        Modifications:
        - Code deja nettoye par le workflow ci.yml
        - Assets build pour la production
        - Cache Symfony optimise
        - Deploye vers OVH
        
        Source: main@$COMMIT_HASH (post auto-clean)"
        
        # TEMP: force-with-lease pour éviter les conflits, à surveiller si problèmes
        git push --force-with-lease origin prod
        # DEBUG: vérification que le push s'est bien passé
        echo "debug: push vers branche prod effectue avec succes"
        
    - name: Deploiement vers OVH
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_HOST }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./
        server-dir: /www/
        exclude: |
          node_modules/**
          .git/**
          .github/**
          assets/**
          .env.local
          .env.test
          .env.dev
          tests/**
          var/log/**
          var/cache/**
          README.md
          DEPLOY_INFO.md
          scripts/**
          
    - name: Creation du tag de release
      run: |
        # INFO: configuration automatique des tags de release
        TAG_NAME="v$(date +%Y.%m.%d-%H%M)"
        git tag -a "$TAG_NAME" -m "Release production $TAG_NAME
        
        Deploiement automatique depuis main (post auto-clean)
        Commit: $(git rev-parse --short main)
        Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        git push origin "$TAG_NAME"
        # DEBUG: confirmation de création du tag
        echo "debug: tag de release $TAG_NAME cree avec succes"
        # TODO: ajouter création automatique de release GitHub avec changelog
        
    - name: Resume du deploiement
      run: |
        echo "## Deploiement reussi" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Site: https://moreno-dev.fr" >> $GITHUB_STEP_SUMMARY
        echo "- Code source: main (nettoye par ci.yml)" >> $GITHUB_STEP_SUMMARY
        echo "- Branche prod: Synchronisee et deployee" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: $(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY
        echo "- Heure: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Etapes completees:" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Code deja nettoye par workflow ci.yml" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Assets build avec Vite" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Symfony optimise pour la production" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Branche prod mise a jour" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Deploye sur OVH via FTP" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Tag de release cree" >> $GITHUB_STEP_SUMMARY
        # DEBUG: affichage final pour confirmer la completion
        echo "debug: workflow de deploiement termine avec succes"